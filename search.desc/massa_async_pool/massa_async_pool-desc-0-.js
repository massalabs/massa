searchState.loadedDescShard("massa_async_pool", 0, "Copyright (c) 2022 MASSA LABS info@massa.net\nStructure defining an asynchronous smart contract message\nUnique identifier of a message. Also has the property of …\nStructure defining a trigger for an asynchronous message\nSerializer for a trigger for an asynchronous message\nrepresents an update to one or more fields of a …\nRepresents a pool of sorted messages in a deterministic …\nConsolidated changes to the asynchronous message pool\n<code>AsyncPoolChanges</code> serializer\nAsynchronous pool configuration\nDeserializer for <code>AsyncPool</code>\nSerializer for <code>AsyncPool</code>\nFilter on the address\nBoolean that determine if the message can be executed. For …\nBoolean that determine if the message can be executed. For …\nCan be executed key formatting macro\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nCoins sent from the sender to the target address of the …\nCoins sent from the sender to the target address of the …\nCoins key formatting macro\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nAsynchronous pool configuration\nFilter on the datastore key\nThe address towards which the message is being sent\nThe address towards which the message is being sent\nDestination key formatting macro\nIndex of the emitted message within the <code>emission_slot</code>. …\nIndex of the emitted message within the <code>emission_slot</code>. …\nEmission index key formatting macro\nSlot at which the message was emitted\nSlot at which the message was emitted\nEmission slot key formatting macro\nFee paid by the sender when the message is processed.\nFee paid by the sender when the message is processed.\nFee key formatting macro\nthe function function name within the destination address…\nthe function function name within the destination address…\nFunction name key formatting macro\nRaw payload parameters to call the function with\nRaw payload parameters to call the function with\nFunction params key formatting macro\nmax handler length\nmax handler params length\nMaximum gas to use when processing the message\nMaximum gas to use when processing the message\nMax gas key formatting macro\nmax key length for message deserialization\nmax number of messages in the pool\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nMessage id prefix formatting macro\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nThe address that sent the message\nThe address that sent the message\nSender key formatting macro\nthread count\nTrigger that define whenever a message can be executed\nTrigger that define whenever a message can be executed\nTrigger key formatting macro\nSlot at which the message stops being valid (bound not …\nSlot at which the message stops being valid (bound not …\nValidity end key formatting macro\nSlot at which the message starts being valid (bound …\nSlot at which the message starts being valid (bound …\nValidity start key formatting macro\nConsolidated changes to the asynchronous message pool\n<code>AsyncPoolChanges</code> serializer\nextends the current <code>AsyncPoolChanges</code> with another one\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPushes a message activation to the list of changes.\nPushes a message addition to the list of changes. No …\nPushes a message deletion to the list of changes. No …\nAsynchronous pool configuration\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nmax handler length\nmax handler params length\nmax key length for message deserialization\nmax number of messages in the pool\nthread count\nStructure defining an asynchronous smart contract message\nUnique identifier of a message. Also has the property of …\nStructure defining a trigger for an asynchronous message\nDeserializer for a trigger for an asynchronous message\nSerializer for a trigger for an asynchronous message\nrepresents an update to one or more fields of a …\nDeserializer for <code>AsyncMessageUpdate</code>\nSerializer for <code>AsyncMessageUpdate</code>\nFilter on the address\nextends the <code>AsyncMessage</code> with a <code>AsyncMessageUpdate</code>\nextends the <code>AsyncMessage</code> with a <code>AsyncMessageUpdate</code>\nextends the <code>AsyncMessageUpdate</code> with another one\nBoolean that determine if the message can be executed. For …\nBoolean that determine if the message can be executed. For …\nCoins sent from the sender to the target address of the …\nCoins sent from the sender to the target address of the …\nCompute the ID of the message for use when choosing which …\nFilter on the datastore key\nExample\nExample\nThe address towards which the message is being sent\nThe address towards which the message is being sent\nIndex of the emitted message within the <code>emission_slot</code>. …\nIndex of the emitted message within the <code>emission_slot</code>. …\nSlot at which the message was emitted\nSlot at which the message was emitted\nFee paid by the sender when the message is processed.\nFee paid by the sender when the message is processed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe function function name within the destination address…\nthe function function name within the destination address…\nRaw payload parameters to call the function with\nRaw payload parameters to call the function with\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum gas to use when processing the message\nMaximum gas to use when processing the message\nCreates a new <code>AsyncMessageUpdateSerializer</code>\nCreates a new <code>AsyncMessageUpdateDeserializer</code>\nTake an <code>AsyncMessage</code> and return it\nThe address that sent the message\nThe address that sent the message\nExample\nExample\nTrigger that define whenever a message can be executed\nTrigger that define whenever a message can be executed\nSlot at which the message stops being valid (bound not …\nSlot at which the message stops being valid (bound not …\nSlot at which the message starts being valid (bound …\nSlot at which the message starts being valid (bound …\nRepresents a pool of sorted messages in a deterministic …\nDeserializer for <code>AsyncPool</code>\nSerializer for <code>AsyncPool</code>\nApplies pre-compiled <code>AsyncPoolChanges</code> to the pool without …\nAsynchronous pool configuration\nDelete every sub-entry associated to the given address.\nQuery a message from the database.\nQuery a vec of messages from the database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeserializes the key and value, useful after bootstrap\nCreates a new <code>AsyncPool</code> serializer\nCreates a new <code>AsyncPool</code> deserializer\nCreates an empty <code>AsyncPool</code>\nAdd every sub-entry individually for a given entry.\nRecomputes the local message_info_cache after bootstrap or …\nResets the pool to its initial state\nUpdate the ledger entry of a given address.")