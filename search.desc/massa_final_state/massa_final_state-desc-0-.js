searchState.loadedDescShard("massa_final_state", 0, "Copyright (c) 2022 MASSA LABS info@massa.net\nExtendFromDbError\nRepresents a final state …\nLedger configuration\nTrait for final state controller.\nFinal state error\ninvalid slot: {0}\nledger error: {0}\nIsConsistentWithShutdownPeriodError\nPoS error: {0}\nSnapshot error: {0}\nrepresents changes that can be applied to the execution …\nBasic <code>StateChanges</code> deserializer\nBasic <code>StateChanges</code> serializer.\nasynchronous pool containing messages sorted by priority …\nasynchronous pool changes\nasynchronous pool configuration\nPerforms the initial draws.\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nexecution state configuration\nthe RocksDB instance used to write every final_state …\nendorsement count\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nexecuted denunciations\nexecuted denunciations changes\nexecuted denunciations configuration\nexecuted operations\nexecuted operations changes\nexecuted operations configuration\ncheck if an operation is in the executed ops\nexecution trail hash change\nfinal changes history length\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nApplies changes to the execution state at a given slot, …\nTODO\nGet async pool\nGet the database\nGet executed denunciations\nGets the hash of the execution trail\nGet the fingerprint (hash) of the final state. Note that …\nGet last slot before downtime\nGet last start period\nGet ledger\nGet ledger mut\nGet MIP Store\nGet mutable reference to MIP Store\nGet the executed status ops\nGet pos state\nGet pos state mut\nGet the slot at the end of which the final state is …\nInitialize the execution trail hash to zero.\ninitial rolls file path\ninitial PoS seed string\nDeserialize the entire DB and check the data. Useful to …\nlast_slot_before_downtime\nlast_start_period\nfinal ledger associating addresses to their balance, …\nInterval of periods between creation of each ledger backup\nledger changes\nledger configuration\nmax number of denunciations that can be included in a …\nmax number of denunciation index in executed denunciations …\nMIP store\nperiods per cycle\nroll state changes\nproof-of-stake configuration\nproof of stake state containing cycle history and deferred …\nAfter bootstrap or load from disk, recompute all the …\nReset the final state to the initial state.\nSet last slot before downtime\nSet last start period\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nTODO\nthread count\nLedger configuration\nasynchronous pool configuration\nendorsement count\nexecuted denunciations configuration\nexecuted operations configuration\nfinal changes history length\nReturns the argument unchanged.\nTODO\ninitial rolls file path\ninitial PoS seed string\nCalls <code>U::from(self)</code>.\nInterval of periods between creation of each ledger backup\nledger configuration\nmax number of denunciations that can be included in a …\nmax number of denunciation index in executed denunciations …\nperiods per cycle\nproof-of-stake configuration\nTODO\nthread count\nTrait for final state controller.\nPerforms the initial draws.\ncheck if an operation is in the executed ops\nApplies changes to the execution state at a given slot, …\nGet async pool\nGet the database\nGet executed denunciations\nGets the hash of the execution trail\nGet the fingerprint (hash) of the final state. Note that …\nGet last slot before downtime\nGet last start period\nGet ledger\nGet ledger mut\nGet MIP Store\nGet mutable reference to MIP Store\nGet the executed status ops\nGet pos state\nGet pos state mut\nGet the slot at the end of which the final state is …\nInitialize the execution trail hash to zero.\nDeserialize the entire DB and check the data. Useful to …\nAfter bootstrap or load from disk, recompute all the …\nReset the final state to the initial state.\nSet last slot before downtime\nSet last start period\nExtendFromDbError\nFinal state error\ninvalid slot: {0}\nledger error: {0}\nIsConsistentWithShutdownPeriodError\nPoS error: {0}\nSnapshot error: {0}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a final state …\nInternal function called by is_db_valid\nasynchronous pool containing messages sorted by priority …\nexecution state configuration\nthe RocksDB instance used to write every final_state …\nexecuted denunciations\nexecuted operations\nUsed during interpolation, when a new cycle is set as …\nReturns the argument unchanged.\nOnce we created a FinalState from a snapshot, we need to …\nThis helper function is to be called if the downtime spans …\nThis helper function is to be called if the downtime does …\nCalls <code>U::from(self)</code>.\nlast_slot_before_downtime\nlast_start_period\nfinal ledger associating addresses to their balance, …\nMIP store\nInitializes a new <code>FinalState</code>\nInitializes a <code>FinalState</code> from a snapshot.\nproof of stake state containing cycle history and deferred …\nrepresents changes that can be applied to the execution …\nBasic <code>StateChanges</code> deserializer\nBasic <code>StateChanges</code> serializer.\nextends the current <code>StateChanges</code> with another one\nasynchronous pool changes\nexecuted denunciations changes\nexecuted operations changes\nexecution trail hash change\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nledger changes\nCreates a <code>StateChangesSerializer</code>\nCreates a <code>StateChangesDeserializer</code>\nroll state changes")