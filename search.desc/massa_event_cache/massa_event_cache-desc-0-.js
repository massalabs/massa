searchState.loadedDescShard("massa_event_cache", 0, "Path to the hard drive cache storage\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCall stack max length\nMaximum number of entries we want to keep in the event …\nMaximum length of an event data (aka event message)\nMaximum number of events per operation\nMaximum events returned in a query\nMaximum number of operations per block\nAmount of entries removed when <code>event_cache_size</code> is reached\nThread count\ninterface that communicates with the worker thread\nimplementation of the event cache controller\nstructure used to communicate with controller\nEvent cache\nReturns the argument unchanged.\nReturns the argument unchanged.\ninput data to process in the VM loop with a wake-up …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nset stop to true to stop the thread\nDisk based event cache db (rocksdb based)\nA filter parameter - used to decompose an EventFilter in …\nKey for this type of data that we want to get\nPrefix u8 used to identify rocksdb keys\nCounter key for specific emitter_address / operation_id / …\nRocksDB database\nHow many entries are in the db. Count is initialized at …\nEvent deserializer\nEvent serializer\nEstimate for a given KeyIndent &amp; FilterItem the number of …\nFirst event slot in db\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a EventFilter into a list of (KeyIndent, …\nGet events filtered by the given argument\nInsert a new event in the cache\nFrom an event add keys &amp; values into a rocksdb batch\nInsert new events in the cache\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow level key builder function There is no guarantees that …\nKey builder\nKey usually used to populate the DB\nLast event slot in db\nMaximum number of entries we want to keep in the db. When …\nMaximum number of events per operation\nMax number of events returned by a query\nMaximum number of operations per block\nCreate a new EventCache\nOperation Id Serializer\nPrefix key to iterate over specific emitter_address / …\nPrefix key to iterate over all events / emitter_address / …\nTry to remove some entries from the db\nHow many entries are removed when <code>entry_count</code> reaches …\nThread count\nSCOutputEvent deserializer\nSCOutputEvent deserializer args\nMetadata serializer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvent cache manager trait used to stop the event cache …\n… manager Allows stopping the … worker\nStructure gathering all elements needed by the event cache …\nEvent cache\nReturns the argument unchanged.\nReturns the argument unchanged.\ninput data to process in the VM loop with a wake-up …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain loop of the worker\nStop the event cache thread Note that we do not take self …\nstops the worker\nhandle used to join the worker thread\nWaits for an event to trigger a new iteration in the event …")