searchState.loadedDescShard("massa_execution_worker", 0, "General description\nThis module represents the context in which the VM …\nThis module implements an execution controller. See …\nThis module deals with executing final and active slots, …\nImplementation of the interface between …\nThis file defines a generic finite-size execution request …\nCopyright (c) 2022 MASSA LABS info@massa.net This module …\nThe speculative asynchronous pool represents the state of …\nCopyright (c) 2023 MASSA LABS info@massa.net Speculative …\nCopyright (c) 2022 MASSA LABS info@massa.net Speculative …\nThe speculative ledger represents, in a compressed way, …\nLaunches an execution worker thread and returns an …\nCopyright (c) 2022 MASSA LABS info@massa.net\nProvide abstraction and implementations of a storage …\nCopyright (c) 2022 MASSA LABS info@massa.net This module …\nHistory of the outputs of recently executed slots. Slots …\nfound in history at a given index\nout of bounds in the future\nResult of a lazy, active history search\nhistory is empty\nout of bounds in the past\nResult of the search for a slot index in history\nLazily query (from end to beginning) the active datastore …\nLazily query (from end to beginning) the active balance of …\nLazily query (from end to beginning) the active bytecode …\nLazily query (from end to beginning) the active list of …\nLazily query (from end to beginning) the active list of …\nLazily query (from end to beginning) a message based on …\nStarting from the newest element in history, return the …\nFind the history range of a cycle\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the deferred credits for a given address that will be …\nGets all the deferred credits that will be credited until …\nGets the execution trail hash\nGet the execution statuses of a set of operations. Returns …\nGets the index of a slot in history\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove <code>slot</code> and the slots after it from history\nAn execution context that needs to be initialized before …\nA snapshot taken from an <code>ExecutionContext</code> and that …\nCreate a new <code>ExecutionContext</code> for executing an active slot.\nAdd <code>roll_count</code> rolls to the buyer address. Validity checks …\nAddress factory\nAppends data to a datastore entry for an address in the …\nspeculative asynchronous pool messages emitted so far in …\nCancels an asynchronous message, reimbursing <code>msg.coins</code> to …\nin case of\nconfiguration\nCreates a new smart contract address with initial …\ncounter of newly created addresses so far at this slot …\ncounter of newly created addresses so far during this …\ncounter of newly created events so far during this …\ncounter of newly created events so far during this …\ncounter of async messages emitted so far in this execution\ncounter of newly created messages so far during this …\nCreator address. The bytecode of this address can’t be …\nminimal balance allowed for the creator of the operation …\nDeletes a datastore entry for an address. Fails if the …\nkeep the count of event emitted in the context\nCreates a new event but does not emit it. Note that this …\nEmits a previously created event. Overrides the event’s …\ngenerated events during this execution, with multiple …\nExecute the deferred credits of <code>slot</code>.\nspeculative list of executed denunciations\nspeculative list of operations executed\nExecution trail hash\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe gas remaining before the last subexecution. so …\nThe gas remaining before the last subexecution. so …\nGenerate the execution trail hash\ngets the cycle information for an address\nGet future deferred credits of an address With optionally …\ngets the effective balance of an address\ngets the bytecode of an address if it exists in the …\nGets the addresses from the call stack (last = top of the …\nGets the address at the top of the call stack, if any\nGets the current call coins\nGets the current list of owned addresses (top of the stack)\ngets the data from a datastore entry of an address if it …\ngets the datastore keys of an address if it exists in the …\nReturns a snapshot containing the clone of the current …\nchecks if a datastore entry exists in the speculative …\nChecks whether the context currently grants write access …\nInitializes and seeds the PRNG with the given execution …\nInsert a executed denunciation.\nInsert an executed operation. Does not check for reuse, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a denunciation was previously executed (to …\nCheck if an operation was previously executed (to prevent …\nspeculative ledger changes caused so far in the context\nthe associated message infos for the speculative async pool\ncache of compiled runtime modules\nCreate a new empty <code>ExecutionContext</code> This should only be …\nblock Id, if one is present at the execution slot\noperation id that originally caused this execution (if any)\nspeculative roll state changes caused so far in the context\nAdd a new asynchronous message to speculative pool\nTrue if it’s a read-only context\nCreate a new <code>ExecutionContext</code> for read-only execution This …\nResets context to an existing snapshot. Optionally emits …\nSets a bytecode for an address in the speculative ledger. …\nSets a datastore entry for an address in the speculative …\nFinishes a slot and generates the execution output. …\nslot at which the execution happens\nspeculative asynchronous pool state, as seen after …\nspeculative list of executed denunciations\nspeculative list of executed operations\nspeculative ledger state, as seen after everything that …\nspeculative roll state, as seen after everything that …\naddress call stack, most recent is at the back\naddress call stack, most recent is at the back\nThis function takes a batch of asynchronous operations to …\nTransfers coins from one address to another. No changes …\nTry to sell <code>roll_count</code> rolls from the seller address.\nTry to slash <code>roll_count</code> rolls from the denounced address. …\nUnsafe random state\nUnsafe random state (can be predicted and manipulated)\nUpdate production statistics of an address.\nimplementation of the execution controller\nstructure used to communicate with execution thread\nExecution manager Allows stopping the execution worker\nstorage instances for previously unprocessed blocks\nReturns a boxed clone of self. Allows cloning …\nExecutes a read-only request Read-only requests do not …\ncurrent execution state (see execution.rs for details)\nlist of newly finalized blocks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets information about a batch of addresses\nReturn the active rolls distribution for the given <code>cycle</code>\nCheck if a denunciation has been executed given a …\nGet the generated execution events, optionally filtered by:\nGet a copy of a single datastore entry with its final and …\nGet the final and candidate values of balance.\nSee trait definition\nGet execution statistics\ninput data to process in the VM loop with a wake-up …\ninput data to process in the VM loop with a wake-up …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty <code>ExecutionInputData</code>\nnew blockclique (if there is a new one)\nAtomically query the execution state with multiple requests\nqueue for read-only execution requests and response MPSCs …\nstops the worker\nset stop to true to stop the thread\nTakes the current input data into a clone that is returned,\nhandle used to join the worker thread\nUpdates blockclique status by signaling newly finalized …\nABIs\nStructure holding consistent speculative and final …\nApplies an execution output to the active (non-final) state\nApplies the output of an execution to the final execution …\nUsed to acquire a lock on the execution context\nTries to execute an asynchronous message If the execution …\nExecute an operation of type <code>CallSC</code> Will panic if called …\nExecute a candidate slot\nExecute a denunciation in the context of a block.\nExecute an operation of type <code>ExecuteSC</code> Will panic if …\nExecute an SCE-final slot\nExecute an operation in the context of a block. Assumes …\nRuns a read-only execution request. The executed bytecode …\nExecute an operation of type <code>RollBuy</code> Will panic if called …\nExecute an operation of type <code>RollSell</code> Will panic if called …\nExecutes a full slot (with or without a block inside) …\nExecute an operation of type <code>Transaction</code> Will panic if …\nReturns the argument unchanged.\nGet future deferred credits of an address Returns tuple: …\nGet future deferred credits of an address\nReturns for a given cycle the stakers taken into account …\nGet cycle infos\nCheck if a denunciation has been executed given a …\nGets execution events optionally filtered by:\nGets a balance both at the latest final and candidate …\nGets a data entry both at the latest final and active …\nGets a balance both at the latest final and candidate …\nGet every final and active datastore key of the given …\nGets roll counts both at the latest final and active …\nGet the fingerprint of the final state\nGet the execution status of a batch of operations.\nGet execution statistics\nCalls <code>U::from(self)</code>.\nprometheus metrics\nCreate a new execution state. This should be called only …\nHelper function. Within a locked execution context (lock …\nUpdate MipStore with block header stats\nstructure describing the output of a denunciation execution\nTarget address of the denunciation\nAuto sell roll execution (empty if execution-info feature …\nCancel async message execution (empty if execution-info …\nDeferred credits execution (empty if execution-info …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSave transfer for a given slot\nAmount slashed if successfully executed\nDenunciation slot\nan implementation of the Interface trait (see …\nAdds two native amounts, saturating at the numeric bounds …\nConverts a public key to an address\nHelper function that creates an amount from a NativeAmount\nHelper function that creates a NativeAmount from the …\nAppends a value to a datastore entry for a given address, …\nCheck whether or not the caller has write access in the …\nChecks if the given native amount is valid\nallows cloning a boxed <code>InterfaceImpl</code>\nexecution configuration\nthread-safe shared access to the execution context (see …\nhelper for locking the context mutex\nCreates a new ledger entry with the initial bytecode given …\nDeletes a datastore entry by key for a given address, or …\nDivides a native amount by a divisor, return an error if …\nChecks if a datastore entry exists for a given address, or …\nGet an EVM address from a raw secp256k1 public key (64 …\nGet a raw secp256k1 public key from an EVM signature and …\nVerify an EVM signature\nCalled to finish the call process after a bytecode calls a …\nReturns the argument unchanged.\nEmits an execution event to be stored.\nEmits an execution event to be stored.\nHelper function to get the address from the option given …\nGets the balance of the current address address (top of …\nGets the balance of arbitrary address passed as argument.\nGets the balance of arbitrary address passed as argument, …\nReturns bytecode of the target address, or the current …\nGets the amount of coins that have been transferred at the …\nGets the amount of coins that have been transferred at the …\nReturns the addresses in the call stack, from the bottom …\nReturns the period of the current execution slot\nReturns the current execution slot\nReturns the thread of the current execution slot\nGet the datastore keys (aka entries) for a given address, …\nGets a datastore value by key for a given address, or the …\nGet the datastore keys (aka entries) for a given address\nGet the datastore keys (aka entries) for a given address\nGet the module from cache if possible, compile it if not\nGets an operation datastore value by key. Note that the …\nGet the operation datastore keys (aka entries). Note that …\nGet the operation datastore keys (aka entries). Note that …\nReturns the list of owned addresses (top of the call …\nReturns the current time (millisecond UNIX timestamp) Note …\nCompile and return a temporary module\nChecks if a datastore entry exists for the current address …\nChecks if a datastore entry exists for a given address.\nHashes arbitrary data\nHashes givens byte array with blake3\nKeccak256 hash function\nHashes givens byte array with sha256\nInitialize the call when bytecode calls a function from …\nCalls <code>U::from(self)</code>.\nHelper function that creates an MassaTime from a NativeTime\nHelper function that creates a NativeTime from the …\nReturns a NativeAmount from a string\nReturns a string from a NativeAmount\ncreates a new <code>InterfaceImpl</code>\nChecks if an operation datastore entry exists in the …\nprints a message in the node logs at log level 3 (debug)\nAppends data to a datastore entry for the current address …\nAppends a value to a datastore entry for a given address. …\nDeletes a datastore entry by key for the current address …\nDeletes a datastore entry by key for a given address. …\nReturns bytecode of the current address\nReturns bytecode of the target address\nGets a datastore value by key for the current address (top …\nGets a datastore value by key for a given address.\nSets the bytecode of the current address\nSets the bytecode of an arbitrary address. Fails if the …\nSets a datastore entry for the current address (top of the …\nSets a datastore entry for a given address. Fails if the …\nTry to get a write lock on the execution context then set …\nDivides a native amount by a divisor, return an error if …\nMultiplies a native amount by a factor, saturating at the …\nAdds an asynchronous message to the context speculative …\nSets the bytecode of an arbitrary address, or the current …\nVerifies a signature\nSubtracts two native amounts, saturating at the numeric …\nTransfer coins from the current address (top of the call …\nTransfer coins from a given address towards a target …\nTransfer coins from a given address (or the current …\nReturns a pseudo-random deterministic <code>i64</code> number\nReturns a pseudo-random deterministic <code>f64</code> number\nReturns a pseudo-random deterministic byte array, with the …\nStructure representing an execution request queue with …\nRepresents an execution request T coupled with an MPSC …\nCancel the request by consuming the object and sending an …\nCancel all queued items.\nReturns the max number of items the queue can contain\nExtends Self with the contents of another <code>RequestQueue</code>. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructure self into a (request, response sender) pair\nChecks whether the queue is empty\nTake all the elements into a new queue and reset the …\nMax number of item in the queue. When the queue is full, …\nCreate a new request with response sender\nCreate a new request queue\nPop out the oldest element of the queue\nPush a new element at the end of the queue. May fail if …\nThe actual underlying queue\nThe underlying execution request\nAn std::mpsc::Sender to later send the execution output R …\nInformation about a slot in the execution sequence\nStructure allowing execution slot sequence management.\nClean the slot sequence by removing slots that are not …\nConfig\nWhether the slot is CSS-final\nContent of the slot (None if miss, otherwise block ID and …\nWhether the slot is SCE-final\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the block ID (if any) at that slot\nGets the instant of the slot just after the latest slot in …\nGets an immutable reference to a SlotInfo, if any, …\nGet the index of a slot in the sequence, if present, …\nInternal function allowing to get the latest slot we …\nInternal method that inits the sequencer. This method is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there is a queued slot that needs to be …\nlatest CSS-final slots (one per thread)\ncandidate slot execution cursor\nfinal slot execution cursor\nlatest SCE-final slot\nCreate a new slot sequencer. Note that this will create a …\nIf a slot is ready for execution, this method will mark it …\nContinuous sequence of slots containing all the slots …\nInternal method called by <code>Self::update</code> to construct one …\nSlot\nNotify the sequencer of incoming changes: CSS-finalized …\nReturns the argument unchanged.\nTakes a snapshot (clone) of the emitted messages\nCalls <code>U::from(self)</code>.\nCheck in the ledger changes if a message trigger has been …\nCreates a new <code>SpeculativeAsyncPool</code>\nAdd a new message to the list of changes of this …\nResets the <code>SpeculativeAsyncPool</code> emitted messages to a …\nSettle a slot. Consume newly emitted messages into …\nReturns the changes caused to the <code>SpeculativeAsyncPool</code> …\nTakes a batch of asynchronous messages to execute, …\nSpeculative state of executed denunciations\nHistory of the outputs of recently executed slots. Slots …\nexecuted operations: maps the operation ID to its validity …\nThread-safe shared access to the final state. For reading …\nReturns the argument unchanged.\nTakes a snapshot (clone) of the changes since its creation\nInsert an executed denunciation.\nCalls <code>U::from(self)</code>.\nChecks if a denunciation was executed previously\nCreates a new <code>SpeculativeExecutedDenunciations</code>\nResets the <code>SpeculativeRollState</code> to a snapshot (see …\nReturns the set of operation IDs caused to the …\nSpeculative state of executed operations\nHistory of the outputs of recently executed slots. Slots …\nexecuted operations: maps the operation ID to its validity …\nThread-safe shared access to the final state. For reading …\nReturns the argument unchanged.\nTakes a snapshot (clone) of the changes caused to the …\nInsert an executed operation. Does not check for reuse, …\nCalls <code>U::from(self)</code>.\nChecks if an operation was executed previously\nCreates a new <code>SpeculativeExecutedOps</code>\nResets the <code>SpeculativeRollState</code> to a snapshot (see …\nReturns the set of operation IDs caused to the …\nThe <code>SpeculativeLedger</code> contains an thread-safe shared …\nHistory of the outputs of recently executed slots. Slots …\nlist of ledger changes that were applied to this …\nCharge the storage costs of a datastore entry change, if …\nCreates a new smart contract address with initial bytecode.\nDeletes a datastore entry for a given address. Fails if …\nChecks if an address exists in the speculative ledger\nThread-safe shared access to the final state. For reading …\nReturns the argument unchanged.\nGets the effective balance of an address\nGets the effective bytecode of an address\nGets a copy of a datastore value for a given address and …\nGets a copy of a datastore keys for a given address\nTakes a snapshot (clone) of the changes caused to the …\nCompute the storage costs of a full datastore entry\nChecks if a data entry exists for a given address\nCalls <code>U::from(self)</code>.\nMax bytecode size\nmax datastore key length\nMax datastore value size\ncreates a new <code>SpeculativeLedger</code>\nResets the <code>SpeculativeLedger</code> to a snapshot (see …\nSets the bytecode associated to an address in the ledger. …\nSets a data set entry for a given address in the ledger. …\nstorage cost constants\nReturns the changes caused to the <code>SpeculativeLedger</code> since …\nTransfers coins from one address to another. No changes …\nSpeculative state of the rolls\nHistory of the outputs of recently executed slots. Slots …\nAdd <code>roll_count</code> rolls to the buyer address. Validity checks …\nList of changes to the state after settling roll sell/buy\nThread-safe shared access to the final state. For reading …\nReturns the argument unchanged.\nGet the production statistics for a given address at a …\nGets the deferred credits for a given address that will be …\nGet deferred credits of an address starting from a given …\nGet the production statistics for a given cycle. Returns a …\nInternal function to retrieve the rolls of a given address\nTakes a snapshot (clone) of the changes caused to the …\nCalls <code>U::from(self)</code>.\nCreates a new <code>SpeculativeRollState</code>\nResets the <code>SpeculativeRollState</code> to a snapshot (see …\nSettle the production statistics at <code>slot</code>.\nReturns the changes caused to the <code>SpeculativeRollState</code> …\nTake the non-zero deferred credits at or before <code>slot</code>. Set …\nTry to sell <code>roll_count</code> rolls from the seller address.\nTry to slash <code>amount</code> credits from the given address. If not …\nTry to slash <code>roll_count</code> rolls from the given address. If …\nUpdate production statistics of an address.\nExecution statistics counter\nfinal blocks in the time window (count, instant)\nfinal denunciations executed in the time window (count, …\nfinal operations executed in the time window (count, …\nReturns the argument unchanged.\nget statistics\nCalls <code>U::from(self)</code>.\ncreate a new <code>ExecutionStatsCounter</code>\nrefresh the counters and delete old records\nregister final blocks\nregister final executed denunciations\nregister final executed operations\nduration of the time window\nA storage backend that uses the file system as the …\nA storage backend that uses RocksDB as the underlying …\nA trait that defines the interface for a storage backend …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>FileStorageBackend</code> with the …\nCreates a new instance of <code>RocksDBStorageBackend</code> with the …\nReads the value from the storage backend. The slot is used …\nWrites the given value to the storage backend. The slot is …\nStructure gathering all elements needed by the execution …\nExecutes a read-only request from the queue, if any. The …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMain loop of the execution worker\nCreates the <code>ExecutionThread</code> structure to gather all data …\nqueue for read-only requests and response MPSCs to send …\nSelector controller\nLaunches an execution worker thread and returns an …\nAppend incoming read-only requests to the relevant queue, …\nWaits for an event to trigger a new iteration in the …")