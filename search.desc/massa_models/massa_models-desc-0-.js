searchState.loadedDescShard("massa_models", 0, "Copyright (c) 2022 MASSA LABS info@massa.net All the …\nactive blocks related structures\naddress related structures\namount related structures\nblock structure Copyright (c) 2022 MASSA LABS …\nblock-related structure: block_header\nblock-related structure: block_id\nbytecode structures\nclique\nvarious structures\nnode configuration Main node configuration and all that …\ndatastore serialization / deserialization\ndenunciation Copyright (c) 2022 MASSA LABS info@massa.net …\nendorsements\nmodels error\nexecution related structures\nledger related structures\nmapping grpc\nnode related structure\noperations\nsmart contract output events\npre-hashed trait, for hash less hashmap/set\nrolls\ntrait for massa_signature::Signature secured data-structs\nserialization\nslots\nvarious statistics Copyright (c) 2022 MASSA LABS …\nbootstrap streaming cursor\nmanagement of the relation between time and slots warning: …\nversions\nBlock that was checked as valid, with some useful …\nThe id of the block\none <code>HashMap&lt;Block id, period&gt;</code> per thread (blocks that need …\nThe creator’s address\nBlocks id that have this block as an ancestor\nFitness\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nfor example has its fitness reached the given threshold\none (block id, period) per thread ( if not genesis )\nSame-thread parent creator\nSlot of the block.\nTop level address representation that can differentiate …\nDeserializer for <code>Address</code>\nSerializer for <code>Address</code>\nInfo for a given address on a given cycle\nDerived from a public key.\nDerived from a public key.\nDerived from a public key.\nDerived from a public key.\nnumber of active rolls the address had at that cycle (if …\ncycle number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the address without considering the version …\nDeserialize the address without considering the version …\nComputes the address associated with the given public key. …\nComputes the address associated with the given public key\nComputes address associated with given public key\nGets the associated thread. Depends on the <code>thread_count</code> …\nGets the associated thread. Depends on the <code>thread_count</code>\nGets the associated thread. Depends on the <code>thread_count</code>\nFetches the version of the SC Address\nFetches the version of the UserAddress\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntrue if that cycle is final\nSerializes an <code>Address</code> into a <code>Vec&lt;u8&gt;</code>\nCreates a new deserializer for <code>Address</code>\n<code>ok_count</code> blocks were missed by this address during that …\n<code>ok_count</code> blocks were created by this address during that …\nSerialize the address as bytes. Includes the type and …\nSerialize the address as bytes. Includes the type and …\nSerialize the address as bytes. Includes the type and …\nSerialize the address as bytes. Includes the type and …\nSerialize the address as bytes. Includes the type and …\nDecimals factor for the amount\nDecimals scale for the amount\nA structure representing a decimal Amount of coins with …\nDeserializer for amount\nSerializer for amount\nMaximum amount\nMinimum amount\nsafely add self to another amount, returning None on …\nsafely divide self by an amount, returning None if the …\nsafely divide self by a <code>u64</code>, returning None if the factor …\nsafely multiply self with a <code>u64</code>, returning None on overflow\ncompute self % divisor, return None if divisor is zero\ncompute self % divisor, return None if divisor is zero\nsafely subtract another amount from self, returning None …\nCreate an Amount from the form <code>mantissa / (10^scale)</code> in a …\nExample\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an Amount from a Decimal\nCreates an amount in the format mantissa*10^(-scale).\nconstructs an <code>Amount</code> from the underlying raw <code>u64</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns true if the amount is zero\nCreate a new <code>AmountSerializer</code>\nCreate a new <code>AmountDeserializer</code>\nsafely add self to another amount, saturating the result …\nsafely multiply self with a <code>u64</code>, saturating the result on …\nsafely subtract another amount from self, saturating the …\nExample\nConvert to decimal\nReturns the value in the (mantissa, scale) format where …\nObtains the underlying raw <code>u64</code> representation Warning: do …\nCreate a zero Amount\nactive in alternative cliques\nactive in blockclique\nblock\nDeserializer for <code>Block</code>\nParameters for the deserializer of a block\nBlock status within the graph\nSerializer for <code>Block</code>\ndiscarded for any reason\nfilled block\nforever applies\nreceived but not yet graph-processed\nnot found in graph\nBlock with assosciated meta-data and interfaces allowing …\nwaiting for a missing dependency\nwaiting for its slot\nsize in bytes of the whole block\nchain id\ntrue if given operation is included in the block\nReference contents. Not required for the the security …\nDerived from the same public key used to generate the …\nThe public-key component used in the generation of the …\nExample:\nNumber of endorsements in a block\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the fitness of the block\nsigned header\nsigned header\nA secure hash of the data. See also massa_hash::Hash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf Some(lsp), this will through if trying to deserialize a …\nMax denunciations in a block\nMaximum of operations in a block\nCreates a new <code>BlockSerializer</code>\nCreates a new <code>BlockDeserializer</code>\noperations ids\noperations\nExample:\nContent in sharable, deserializable form. Is used in the …\nA cryptographically generated value using <code>serialized_data</code> …\nNumber of threads in Massa\nblock header\nA denunciation data for block header\nDeserializer for <code>BlockHeader</code>\nSerializer for <code>BlockHeader</code>\nBlockHeader wrapped up alongside verification data\nannounced network version\ncompute the signed hash\nReference contents. Not required for the the security …\nDerived from the same public key used to generate the …\nThe public-key component used in the generation of the …\ncurrent network version\ndenunciations\nExample:\nendorsements\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngets the header fitness\nA secure hash of the data. See also massa_hash::Hash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>BlockHeaderSerializer</code>\nCreates a new <code>BlockHeaderDeserializer</code> If last_start_period …\nCreate a new DenunciationData for block hedader\nall operations hash\nparents\nExample:\nContent in sharable, deserializable form. Is used in the …\nA cryptographically generated value using <code>serialized_data</code> …\nslot\nGet byte array\nblock id\nDeserializer for <code>BlockId</code>\nSerializer for <code>BlockId</code>\nblock id\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExample\nfirst bit of the hashed block id\nfirst bit of the hashed block id\nversion of the block id\nversion of the block id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new serializer for <code>BlockId</code>\nCreates a new deserializer for <code>BlockId</code>\nCurrent version of the bytecode\nStructure representing executable bytecode\nDeserializer for <code>Bytecode</code>\nSerializer for <code>Bytecode</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>LedgerEntryDeserializer</code>\nCreates a new <code>BytecodeSerializer</code>\nMutually compatible blocks in the graph\nBasic deserializer for <code>Clique</code>\nBasic serializer for <code>Clique</code>\nthe block ids of the blocks in that clique\nExample\nFitness used to compute finality Depends on descendants …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if it is the clique of higher fitness\nCreates a <code>CliqueDeserializer</code>\nCreates a <code>CliqueSerializer</code>\nExample\nthe block has been processed and is valid\nthe block is discarded\ndiscarded\nin a block, the block being in …\nthe block hasn’t been processed by consensus yet\noperation info\nStatus in which an operation can be (derived from the …\nStatus in which an operation can be\nin pool\njust a public key and a signature it has produced used for …\nall the production stats for every known staker\nthe block waits for dependencies for further processing\nthe block waits for it’s slot for further processing\ncycle number\ncombine two operation search result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nmaps block id to index on the operation in the block and …\ntrue if in pool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nif that cycle is final\nmap address to produced valid block count and not valid …\nthe operation\npublic key\nsignature\noperation status\nCompact representation of key values of consensus …\nReward amount for a block creation\nMerge the settings\nDEFAULT VALUES USED TO INITIALIZE DIVERS CONFIGURATIONS …\nThreshold for fitness.\nTESTNET: time when the blockclique is ended.\nTime in milliseconds when the blockclique started.\nBuild a settings for an object that implement …\nMax total size of a block\nMaximum operation validity period count\ncycle duration in periods\nPrice of a roll on the network\nTime between the periods in the same thread.\nNumber of threads\nCompact representation of key values of consensus …\nReward amount for a block creation\nThreshold for fitness.\nTESTNET: time when the blockclique is ended.\nReturns the argument unchanged.\nTime in milliseconds when the blockclique started.\nCalls <code>U::from(self)</code>.\nMax total size of a block\nMaximum operation validity period count\ncycle duration in periods\nPrice of a roll on the network\nTime between the periods in the same thread.\nNumber of threads\nConstant cost applied to asynchronous messages (to take …\nGas used by a base operation (transaction, roll buy, roll …\nBlock reward is given for each block creation\nSize of the random bytes array used for the bootstrap, …\nnode chain id (to avoid replay attacks)\nConsensus static parameters (defined by protocol used) …\nMaximum number of consensus blocks in a bootstrap batch\nThreshold for fitness.\ndenunciation expiration delta\nNumber of endorsement\nTESTNET: time when the blockclique is ended.\n<code>KeyPair</code> to sign genesis blocks.\nTime in milliseconds when the blockclique started. In …\nLength of the handshake random signature\nProof of stake seed for the initial draw\nMax size of the IP list\nNumber of periods of executed operation and denunciation …\nCost to store one byte in the ledger\nCost for a base entry default 0.01 MASSA\nBase size of a empty datastore entry (not counting the key …\nLimit on the number of peers we advertise to others.\nMaximum of GAS allowed for asynchronous messages execution …\nMaximum capacity of the asynchronous messages pool\nMaximum block size in bytes\nMax async pool changes\nMax number of blocks we provide/ take into account while …\nMax number of child nodes\nmax bootstrapped cliques\nmax bootstrapped dependencies\nMax size of the printed error\nMax bytes in final states parts\nMax message size for bootstrap Note: Update sizes are not …\nThe number of bytes needed to encode …\nMax number of cycles in PoS bootstrap\nMax bytes in final states parts\nMaximum length of a datastore value\nMaximum number of consensus block ids when sending a …\nMaximum number of key/values in the datastore of a ledger …\nMaximum length of a datastore key\nMaximum length of a datastore value\nMaximum size proof-of-stake deferred credits\nMax number of denunciations that can be included in a …\nMaximum size of executed denunciations\nmax duplex buffer size\nMax number of endorsements per message\nMaximum event size in bytes\nMaximum size of executed ops changes\nMaximum size of executed ops\nMaximum length function name in call SC\nMaximum of GAS allowed for a block\nMaximum ledger changes count\nMaximum ledger changes in a block\nMaximum number of listeners for a peer\nMaximum message length in bytes\nMaximum number of operations per block\nMax number of operations per message\nMaximum number of key/values in the datastore of a …\nMaximum length of an operation datastore key\nMaximum length of an operation datastore value\nMaximum of time we keep the operations in the storage of …\nMaximum size of parameters in call SC\nMaximum number of peer in a announcement list of peer\nMaximum production events in a block\nMaximum size of proof-of-stake production stats\nMaximum length of <code>rng_seed</code> in thread cycle\nMaximum size of proof-of-stake rolls\nMaximum size of channel used for commands in connectivity …\nMaximum size of channel used for commands in peers …\nMaximum size of channel used for commands in peer testers …\nMaximum size of channel used for commands in propagation …\nMaximum size of channel used for commands in propagation …\nMaximum size of channel used for commands in propagation …\nMaximum size of channel used for commands in retrieval …\nMaximum size of channel used for commands in retrieval …\nMaximum size of channel used for commands in retrieval …\nMaximum size of channel used to send network events to the …\nMaximum size of channel used to send network events to the …\nMaximum size of channel used to send network events to the …\nMaximum size of channel used to send network events to the …\nBlock count to process in MipStoreStats (for state change …\nnetwork controller communication channel size\nnetwork event channel size\nnetwork node command channel size\nnetwork node event channel size\nnode send channel size\nMaximum operation validity period count\ncycle duration in periods\nPool controller denunciations channel size\nPool controller endorsements channel size\nPool controller operations channel size\nnumber of cycle misses (strictly) above which stakers are …\nNumber of cycles saved in <code>PoSFinalState</code>\nProtocol controller channel size\nProtocol event channel size\nNumber of roll to remove per denunciation\nPrice of a roll in the network\nNumber of cycle draws saved in the selector cache\nIMPORTANNT TODO: should be removed after the bootstrap …\nTime between the periods in the same thread.\nNumber of threads\nnode version\nMinimum value allowed for activation delay (in MIP info)\nThreshold to accept a new versioning\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function to parse args for lazy_static evaluations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge the settings\nDatastore entry for Ledger &amp; <code>ExecuteSC</code> Operation A …\nDeserializer for <code>Datastore</code> field in <code>LedgerEntry</code>\nSerializer for <code>Datastore</code>\nExample\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor lexicographically ordered keys, gets the upper and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DatastoreDeserializer</code>\nCreates a new <code>DatastoreSerializer</code>\nExample\nVariant for Block header denunciation index\nBlock header variant\nA Variant of Denunciation enum for block header\nDeserializer for <code>BlockHeaderDenunciation</code>\nDenunciationPrecursor variant for block header\nSerializer for <code>BlockHeaderDenunciation</code>\nA denunciation enum\nDeserializer for <code>Denunciation</code>\nDenunciation error\nIndex for Denunciations in collections (e.g. like a HashMap…\nDeserializer for <code>DenunciationIndex</code>\nSerializer for <code>DenunciationIndex</code>\nLightweight data for Denunciation creation (avoid storing …\nSerializer for <code>Denunciation</code>\nVariant for Endorsement denunciation index\nEndorsement variant\nA Variant of Denunciation enum for endorsement\nDeserializer for <code>EndorsementDenunciation</code>\nDenunciationPrecursor variant for endorsement\nSerializer for <code>EndorsementDenunciation</code>\nRebuild full hash of SecureShareEndorsement from given …\nRebuild full hash of SecuredHeader from given arguments\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompute the hash\nGet field: index (return None for a block header …\nGet field: index (return None for a block header …\nGet Denunciation public key ref\nGet field: pub key\nGet Denunciation slot ref\nGet field: slot\nGet field: slot\nsecured header partial hash\nsecured header partial hash\nendorsement index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if it is a Denunciation for this block header\nCheck if it is a Denunciation for this endorsement\nCheck if denunciation has expired given a slot period Note …\nCheck if it is a Denunciation of several block headers\nCheck if it is a Denunciation of several endorsements\nCheck if Denunciation is valid Should be used if received …\nCreates a new <code>EndorsementDenunciationSerializer</code>\nCreates a new <code>EndorsementDeserializer</code>\nCreates a new <code>BlockHeaderDenunciationSerializer</code>\nCreates a new <code>BlockHeaderDenunciationDeserializer</code>\nCreates a new <code>BlockHeaderDenunciationSerializer</code>\nCreates a new <code>DenunciationDeserializer</code>\nCreates a new <code>DenunciationIndexSerializer</code>\nCreates a new <code>DenunciationIndexDeserializer</code>\nsecure share endorsement public key\nsecured header public key\nsecured header signature\nsecured header signature\nendorsement slot\nblock header slot\nde index\nde slot\nde slot\nEndorsement ID size in bytes\nan endorsement, as sent in the network\nA denunciation data for endorsement\nDeserializer for <code>Endorsement</code>\nLightweight Deserializer for <code>Endorsement</code>\nendorsement id\nendorsement id\nSerializer for <code>Endorsement</code>\nLightweight Serializer for <code>Endorsement</code> When included in a …\nWrapped endorsement\nCompute the signed hash\nReference contents. Not required for the the security …\nDerived from the same public key used to generate the …\nThe public-key component used in the generation of the …\nExample:\nExample:\nHash of endorsed block. This is the parent in thread …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExample\nA secure hash of the data. See also massa_hash::Hash\nEndorsement index inside the including block\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>EndorsementDeserializer</code>\nCreates a new <code>EndorsementSerializerLW</code>\nCreates a new <code>EndorsementDeserializerLW</code>\nCreates a new <code>EndorsementSerializer</code>\nCreate a new denunciation data for endorsement\nExample:\nExample:\nContent in sharable, deserializable form. Is used in the …\nA cryptographically generated value using <code>serialized_data</code> …\nSlot in which the endorsement can be included\nGet byte array\naddress parsing error: {0}\nLedger changes, Amount overflow\namount parse error\nblock id parsing error\nbuffer error: {0}\nchecked operation error\nDeserialization error: {0}\nendorsement id parsing error\nContains the error value\nError raised {0}\nhashing error\ninvalid ledger change: {0}\ninvalid roll update: {0}\ninvalid version identifier: {0}\n<code>MassaHash</code> error: {0}\n<code>massa_signature</code> error: {0}\nmodels error\nmodels error\nnode id parsing error\nContains the success value\noperation id parsing error\nWrong operation id size deduced on join\nOutdated bootstrap cursor\nperiod overflow error\nSerialization error: {0}\nSerialization error: {0}\nthread overflow error\nTime error {0}\nTime overflow error\nWrong prefix for hash: expected {0}, got {1}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nfilter used when retrieving SC output events\noptional emitter address\noptional end slot\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\noptional execution status\noptional event status\noptional caller address\noptional operation id\noptional start slot\nA balance change that can be applied to an address\nBasic deserializer for <code>LedgerChange</code>\nBasic serializer for <code>LedgerChange</code>\nMap an address to a <code>LedgerChange</code>\nBasic deserializer for <code>LedgerChanges</code>\nBasic serializer for <code>LedgerChanges</code>\na consensus ledger entry\nBasic deserializer for <code>LedgerData</code>\nBasic serializer for <code>LedgerData</code>\napplies a <code>LedgerChange</code>\napply a <code>LedgerChange</code> for an entry Can fail in overflow or …\nthe balance in coins\nAmount to add or subtract\nwhether to increment or decrements balance of delta\nApplies another ledger change on top of self\nchain with another <code>LedgerChange</code>\nclone subset\nExample:\nExample\nExample\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\naddresses that are impacted by these ledger changes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns true if the balance is zero\ntrue if the change is 0\nCreates a <code>LedgerDataDeserializer</code>\nCreates a <code>LedgerChangeDeserializer</code>\nCreates a <code>LedgerChangesSerializer</code>\nCreates a <code>LedgerChangesDeserializer</code>\nnew <code>LedgerData</code> from an initial balance\nCreates a <code>LedgerDataSerializer</code>\nCreates a <code>LedgerChangeSerializer</code>\nExample:\nExample\nmerge another ledger changes into self, overwriting …\nConverts a gRPC <code>grpc_model::DenunciationIndex</code> into a …\n<code>NodeId</code> wraps a public key to uniquely identify a node.\nReturns the argument unchanged.\nExample\nGet the public key of the <code>NodeId</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>NodeId</code> from a public key.\nCalls an exported function from a stored smart contract\nExecute a smart contract.\nSize in bytes of the serialized operation ID prefix\nthe operation as sent in the network\nSerializer for <code>Operation</code>\noperation id\nDeserializer for <code>OperationId</code>\nSerializer for <code>OperationId</code>\noperation id\nDeserializer for <code>Vec&lt;OperationId&gt;</code>\nSerializer for <code>Vec&lt;OperationId&gt;</code>\nLeft part of the operation id hash stored in a vector of …\nDeserializer for [<code>OperationPrefixId</code>]\nLeft part of the operation id hash stored in a vector of …\nSet of operation id’s prefix\nDeserializer for <code>OperationPrefixIds</code>\nSerializer for <code>OperationPrefixIds</code>\nSerializer for <code>Operation</code>\nType specific operation content\nDeserializer for <code>OperationType</code>\nSerializer for <code>OperationType</code>\nDeserializer for <code>Operations</code>\nSerializer for <code>Operations</code>\nthe sender buys <code>roll_count</code> rolls. Roll price is defined in …\nthe sender sells <code>roll_count</code> rolls. Roll price is defined …\nsigned operation\ntransfer coins from sender to recipient\nCompute the hash of a list of operations(used typically in …\nReference contents. Not required for the the security …\nDerived from the same public key used to generate the …\nThe public-key component used in the generation of the …\nExample:\nExample:\nExample:\nExample:\nExample:\nExample:\nafter <code>expire_period</code> slot the operation won’t be included …\nthe fee they have decided for this operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget prefix of the operation id of size …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExample\nGet the maximum amount of gas used by the operation.\nget the addresses that are involved in this operation from …\nGets the maximal amount of coins that may be spent by this …\nget the addresses that are involved in this operation from …\nget the range of periods during which an operation is valid\nGet the version of the operation by looking at the first …\nA secure hash of the data. See also massa_hash::Hash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nconvert the [<code>OperationId</code>] into a [<code>OperationPrefixId</code>]\nconvert the [<code>OperationId</code>] into a [<code>OperationPrefixId</code>]\nCreates a new <code>OperationSerializer</code>\nCreates a <code>OperationDeserializer</code>\nCreates a new <code>OperationTypeSerializer</code>\nCreates a new <code>OperationTypeDeserializer</code>\nCreates a new <code>OperationIdsSerializer</code>\nCreates a new <code>OperationIdsDeserializer</code>\nCreates a new <code>OperationIdsDeserializer</code>\nCreates a new <code>OperationsDeserializer</code>\nCreates a new serializer for <code>OperationId</code>\nCreates a new deserializer for <code>OperationId</code>\nCreates a deserializer for [<code>OperationPrefixId</code>]\nCreates a new <code>OperationIdsSerializer</code>\nCreates a new <code>OperationsSerializer</code>\nthe type specific operation part\nget a prefix from the [<code>OperationId</code>] by copying it\nget a prefix from the [<code>OperationId</code>] by copying it\nExample:\nExample:\nExample:\nExample:\nContent in sharable, deserializable form. Is used in the …\nA cryptographically generated value using <code>serialized_data</code> …\namount\nExtra coins that are spent from the caller’s balance and …\nSmart contract bytecode.\nA key-value store associating a hash to arbitrary bytes\nMax amount of coins allowed to be spent by the execution\nThe maximum amount of gas that the execution of the …\nThe maximum amount of gas that the execution of the …\nParameter to pass to the target function\nrecipient address\nroll count\nroll count\nTarget smart contract address\nTarget function name. No function is called if empty.\nContext of the event (not generated by the user)\nBy product of a byte code execution\nblock id if there was a block at that slot\nmost recent at the end\ncontext generated by the execution context\njson data string\nReturns the argument unchanged.\nReturns the argument unchanged.\nindex of the event in the slot\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nif the sc that emitted this event failed\nif the event is final\norigin operation id\nif the event was generated during a read only execution\nwhen was it generated\n<code>BuildHasherDefault</code> specialization for <code>HashMapper</code>\nTrait allowing pre-allocations\nA <code>Hasher</code> for <code>PreHashed</code> keys that is faster because it …\n<code>HashMap</code> specialization for <code>PreHashed</code> keys This hashmap is …\n<code>HashSet</code> specialization for <code>PreHashed</code> keys This hashset is …\nA trait indicating that its carrier is already a hash with …\nfinish the hashing process and return the truncated <code>u64</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\npre-allocate with a given capacity\npre-allocate with a given capacity\npre-allocate with a given capacity\nwrite the bytes of a <code>PreHashed</code> key into the <code>HashMapper</code> …\njust a <code>u64</code> to keep track of the roll sells and buys during …\ncounts the roll for each address\nroll sales and purchases\nDeserializer for <code>RollUpdate</code>\nSerializer for <code>RollUpdate</code>\nmaps addresses to roll updates\napplies a <code>RollUpdate</code>, compensates and returns compensation\napplies <code>RollUpdates</code> to self with compensations\nchain two roll updates, compensate and return compensation …\nchains with another <code>RollUpdates</code>, compensates and returns …\nget the roll update for a subset of addresses\nget roll counts for a subset of addresses.\ncompensate a roll update, return compensation count\nExample:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe addresses impacted by the updates\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the <code>RollCounts</code> contains no elements.\ntrue if the update has no effect\nReturns the number of elements in the <code>RollCounts</code>.\nCreates a new <code>RollUpdateSerializer</code>\nCreates a new <code>RollUpdateDeserializer</code>\nMakes a new, empty <code>RollCounts</code>.\nroll purchases\nroll sales\nExample:\nmerge another roll updates into self, overwriting existing …\nmerge another roll counts into self, overwriting existing …\nUsed by signed structure TODO: Make this trait use versions\nPackages type T such that it can be securely sent and …\nTrait that define a structure that can be signed for …\nDeserializer for SecureShare structure\nSerializer for <code>SecureShare</code> structure\nsize in bytes of the whole block\nCompute hash\nCompute hash used for signature\nCompute the signed hash\ntrue if given operation is included in the block\nReference contents. Not required for the the security …\nDerived from the same public key used to generate the …\nThe public-key component used in the generation of the …\nDeserialize the secured structure\nThis method is used to deserialize data that has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the fitness of the block\ngets the header fitness\nGet the maximum amount of gas used by the operation.\nGet a reference to the underlying hash\nget the addresses that are involved in this operation from …\nGets the maximal amount of coins that may be spent by this …\nget the addresses that are involved in this operation from …\nget the range of periods during which an operation is valid\nA secure hash of the data. See also massa_hash::Hash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew id from hash\nCreates a new <code>SecureShareDeserializer</code>\nCreates a new <code>SecureShareSerializer</code>\nUsing the provided key-pair, applies a cryptographic …\nSerialize the secured structure\nThis method is used to serialize a <code>SecureShare</code> structure …\nContent in sharable, deserializable form. Is used in the …\nget full serialized size\nSign the SecureShare given the content\nSign the SecureShare given the content\nA cryptographically generated value using <code>serialized_data</code> …\nverify signature\ncheck if self has been signed by public key\n<code>BitVec&lt;u8&gt;</code> Deserializer\n<code>BitVec&lt;u8&gt;</code> Serializer\nDeserialize min big endian\nDeserializer for <code>IpAddr</code>\nSerializer for <code>IpAddr</code>\nBasic <code>PreHashSet&lt;_&gt;</code> deserializer\nBasic <code>PreHashSet&lt;_&gt;</code> serializer\nSerialize min big endian integer\nDeserializer for <code>String</code> with generic deserializer for the …\nSerializer for <code>String</code> with generic serializer for the size …\nBasic <code>Vec&lt;_&gt;</code> deserializer\nBasic <code>Vec&lt;_&gt;</code> serializer\nBasic <code>Vec&lt;u8&gt;</code> deserializer\nBasic <code>Vec&lt;u8&gt;</code> serializer\narray from slice\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a minimally sized big endian integer to Self …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>IpAddrSerializer</code>\nCreates a <code>IpAddrDeserializer</code>\nCreates a new <code>VecU8Serializer</code>\nCreates a new <code>VecU8Deserializer</code>\nCreates a new <code>VecSerializer</code>\nCreates a new <code>VecDeserializer</code>\nCreates a new <code>PreHashSetSerializer</code>\nCreates a new <code>PreHashSetDeserializer</code>\nCreates a <code>StringSerializer</code>.\nCreates a <code>StringDeserializer</code>.\nCreate a new <code>BitVec&lt;u8&gt;</code> Serializer\nCreate a new <code>BitVec&lt;u8&gt;</code> Deserializer\nserializes with the minimal amount of big endian bytes\nCompute the minimal big endian deserialization size\nCompute the minimal big endian deserialization size\n<code>u8</code> from slice\nWhen an address is drawn to create an endorsement it is …\nsize of the slot key representation\na point in time where a block is expected\nBasic <code>Slot</code> Deserializer\nBasic serializer for <code>Slot</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a slot from its fixed-size sortable binary …\ncycle associated to that slot\nfirst bit of the slot, for seed purpose\nReturns the next Slot\nReturns the previous Slot\nendorsement index in the slot\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncheck if the slot is first in the cycle\ncheck if the slot is last in the cycle\nreturns the maximal slot\nreturns the minimal slot\nnew slot from period and thread\nCreates a <code>SlotSerializer</code>\nCreates a <code>SlotDeserializer</code>\ncreate the first slot of a given cycle\ncreate the last slot of a given cycle\nperiod\nslot\nCounts the number of slots since the one passed in …\nthread\nReturns a fixed-size sortable binary key\nstats produced by consensus module\nexecution statistics\nstats produced by network module\nstats produced by pool module\nactive execution cursor slot\nactive node count\nbanned node count\nnumber of actives cliques\nend of the time span for stats\nnumber of endorsement in the pool\nnumber of final blocks in the time window\nnumber of final blocks\nfinal execution cursor slot\nnumber of final executed operations in the time window\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nin connections count\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntotal known peers count\nnumber of operations in the pool\nout connections count\nnumber of stale blocks in memory\nstart of the time span for stats\ntime window end\ntime window start\nFinished step, after all the information has been streamed\nOngoing step, as long as you are streaming\nStarted step, only when launching the streaming\nStreaming step cursor\n<code>StreamingStep</code> deserializer\n<code>StreamingStep</code> serializer\nIndicates if the current step if finished or not without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>StreamingStep</code> serializer\nCreates a new <code>StreamingStep</code> deserializer\nGets timestamp in milliseconds for given slot.\nTODO DOC\nReturns the thread and block slot index of the current …\nReturns the thread and block period index of the latest …\nCounts the number of slots in a slot range [a, b)\nTurns an <code>MassaTime</code> range [start, end) with optional …\nApplication version, checked during handshakes\nSerializer for <code>Version</code>\nSerializer for <code>Version</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nASCII uppercase alpha\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntrue if instance and major are the same\nCreates a <code>VersionSerializer</code>\nCreates a <code>VersionSerializer</code>")