searchState.loadedDescShard("massa_db_exports", 0, "cache miss error: {0}\nWe use batching to reduce the number of writes to the …\nhash error: {0}\ninvalid ChangeID: {0}\nConfig structure for a <code>MassaDBRaw</code>\nController trait for the MassaDB TODO: MOCK IT WITH …\nMassa DB error\nSimilar to RocksDB’s Direction\nSimilar to RocksDB’s IteratorMode\nrocks db error: {0}\nserialization error: {0}\nA Batch of elements from the database, used by a bootstrap …\ntime error: {0}\nCreates a new hard copy of the DB, for the given slot\nThe ChangeID associated with this batch, useful for …\nUtility function to delete a key &amp; value in the batch\nUtility function to delete all keys in a prefix\nCopyright (c) 2022 MASSA LABS info@massa.net This file …\nFlushes the underlying db.\nUsed for bootstrap servers (get a new batch of data from …\nExposes RocksDB’s “get_cf” function\nGet the current change_id attached to the database.\nUsed for bootstrap servers (get a new batch of data from …\nGet the current extended state hash of the database\nExposes RocksDB’s “iterator_cf” function\nmax_new_elements for bootstrap in final_state stream batch\nChange history to keep (indexed by ChangeID)\nMaximum number of ledger backups to keep\nmax_new_elements for bootstrap in versioning stream batch\nExposes RocksDB’s “multi_get_cf” function\nNew elements to be streamed to the client.\nThe path to the database, used in the wrapped RocksDB …\nExposes RocksDB’s “prefix_iterator_cf” function\nUtility function to put / update a key &amp; value in the batch\nReset the database, and attach it to the given slot.\nSet the initial change_id. This function should only be …\nThread count for slot serialization\nThe changes made to previously streamed keys. Note that a …\nWrites the batch to the DB\nWrite a stream_batch of database entries received from a …\nController trait for the MassaDB TODO: MOCK IT WITH …\nSimilar to RocksDB’s Direction\nSimilar to RocksDB’s IteratorMode\nCreates a new hard copy of the DB, for the given slot\nUtility function to delete a key &amp; value in the batch\nUtility function to delete all keys in a prefix\nFlushes the underlying db.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed for bootstrap servers (get a new batch of data from …\nExposes RocksDB’s “get_cf” function\nGet the current change_id attached to the database.\nUsed for bootstrap servers (get a new batch of data from …\nGet the current extended state hash of the database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExposes RocksDB’s “iterator_cf” function\nExposes RocksDB’s “multi_get_cf” function\nExposes RocksDB’s “prefix_iterator_cf” function\nUtility function to put / update a key &amp; value in the batch\nReset the database, and attach it to the given slot.\nSet the initial change_id. This function should only be …\nWrites the batch to the DB\nWrite a stream_batch of database entries received from a …\nWe use batching to reduce the number of writes to the …\nA Batch of elements from the database, used by a bootstrap …\nThe ChangeID associated with this batch, useful for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper function used to know if the main bootstrap state …\nNew elements to be streamed to the client.\nThe changes made to previously streamed keys. Note that a …\ncache miss error: {0}\nhash error: {0}\ninvalid ChangeID: {0}\nMassa DB error\nrocks db error: {0}\nserialization error: {0}\ntime error: {0}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfig structure for a <code>MassaDBRaw</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nmax_new_elements for bootstrap in final_state stream batch\nChange history to keep (indexed by ChangeID)\nMaximum number of ledger backups to keep\nmax_new_elements for bootstrap in versioning stream batch\nThe path to the database, used in the wrapped RocksDB …\nThread count for slot serialization")