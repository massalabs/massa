searchState.loadedDescShard("massa_pos_exports", 0, "Definition and exports of the PoS types and errors.\nCommunication channel was down: {0}\nContainer inconsistency: {0}\nDeserializer for a single credit\nSerializer for <code>Credits</code>\nDeserializer for cycle history, useful when restarting …\nSerializer for cycle history\nState of a cycle for all threads\nDeserializer for <code>CycleInfo</code>\nSerializer for <code>CycleInfo</code>\n<code>CycleUnavailable</code>: PoS cycle {0} is needed but is absent …\n<code>CycleUnfinished</code>: PoS cycle {0} is needed but is not …\nStructure containing all the PoS deferred credits …\nDeserializer for <code>DeferredCredits</code>\nError while loading initial deferred credits file: {0}\nSerializer for <code>DeferredCredits</code>\nContains the error value\nInvalid roll distribution: {0}\nContains the success value\nOverflow error: {0}\nRecap of all PoS changes\n<code>PoSChanges</code> Deserializer\n<code>PoSChanges</code> Serializer\nproof-of-stake final state configuration\nFinal state of PoS\nProof-of-Stake error\nProof-of-Stake result\nBlock production statistics\nDeserializer for <code>ProductionStats</code>\nSerializer for <code>ProductionStats</code>\nDeserializer for rolls\nError while loading initial rolls file: {0}\nSelections of endorsements and producer\nConfiguration of selector thread\ninterface that communicates with the selector worker thread\nSelector manager used to stop the selector thread\nNumber of blocks missed\nNumber of successfully created blocks\ncommunication channel length\nReturns a boxed clone of self. Useful to allow cloning …\nwhether the cycle is complete (all slots final)\nComplete key formatting macro\nComplete key formatting macro\nproof-of-stake configuration\nThis module exports generic traits representing interfaces …\nDeferred credits\ncycle number\ncontiguous cycle history, back = newest\nnumber of saved cycle\ncycle info deserializer\ncycle info serializer\nAccess to the RocksDB database\nset deferred credits indexed by target slot (can be set to …\ndeferred credits deserializer\nDeferred credits key formatting macro\nDeferred credits key formatting macro\ndeferred credits serializer\nNumber of endorsement\nChosen endorsements\nFeed cycle to the selector\nSnapshot of the final state hash Used for PoS selections\nFinal state hash snapshot key formatting macro\nFinal state hash snapshot key formatting macro\ngenesis address to force draw genesis creators\nGet selections computed for a slot range (only returns …\nGet Address of the selected block producer for a given slot\nGet Selection computed for a slot\ninitial deferred credits file path\ninitial rolls, used for negative cycle look back\ninitial seeds, used for negative cycle look back (cycles …\nmaximum deferred credits length\nMaximum number of computed cycle’s draws we keep in cache\nmaximum production stats length\nmaximum rolls length\nperiods per cycle\nNumber of periods per cycle\nProduction stats fail key formatting macro\nProduction stats fail key formatting macro\nProduction stats prefix macro\nProduction stats prefix macro\nProduction stats success key formatting macro\nProduction stats success key formatting macro\nChosen block producer\nPer-address production statistics\nupdated production statistics\nrandom seed bits of all slots in the cycle so far\nrng_seed cache to get rng_seed for the current cycle\nRng seed key formatting macro\nRng seed key formatting macro\nnew roll counts for addresses (can be 0 to remove the …\nRoll count key formatting macro\nRoll count key formatting macro\nRoll count key prefix macro\nRoll count key prefix macro\nnumber of rolls each staking address has\nextra block seed bits added\nselector controller\nStop the selector thread Note that we do not take self by …\nthread count\nNumber of running threads\nWaits for draws to reach at least a given cycle number. …\nproof-of-stake final state configuration\nnumber of saved cycle\nReturns the argument unchanged.\ninitial deferred credits file path\nCalls <code>U::from(self)</code>.\nmaximum deferred credits length\nmaximum production stats length\nmaximum rolls length\nperiods per cycle\nthread count\nSelections of endorsements and producer\ninterface that communicates with the selector worker thread\nSelector manager used to stop the selector thread\nReturns a boxed clone of self. Useful to allow cloning …\nChosen endorsements\nFeed cycle to the selector\nReturns the argument unchanged.\nGet selections computed for a slot range (only returns …\nGet Address of the selected block producer for a given slot\nGet Selection computed for a slot\nCalls <code>U::from(self)</code>.\nChosen block producer\nStop the selector thread Note that we do not take self by …\nWaits for draws to reach at least a given cycle number. …\nDeserializer for cycle history, useful when restarting …\nSerializer for cycle history\nState of a cycle for all threads\nDeserializer for <code>CycleInfo</code>\nSerializer for <code>CycleInfo</code>\nBlock production statistics\nDeserializer for <code>ProductionStats</code>\nSerializer for <code>ProductionStats</code>\nDeserializer for rolls\nNumber of blocks missed\nNumber of successfully created blocks\nwhether the cycle is complete (all slots final)\ncycle number\nIncrement a production stat structure with another\nSnapshot of the final state hash Used for PoS selections\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the production stats are above the required …\nCreate a new <code>CycleInfo</code>\nCreates a new <code>CycleInfo</code> serializer\nCreates a new <code>CycleInfo</code> deserializer\nCreates a new <code>ProductionStats</code> serializer\nCreates a new <code>ProductionStats</code> deserializer\nCreates a new rolls deserializer\nCreates a new <code>CycleHistory</code> serializer\nCreates a new <code>CycleHistory</code> deserializer\nPer-address production statistics\nrandom seed bits of all slots in the cycle so far\nnumber of rolls each staking address has\nDeserializer for a single credit\nSerializer for <code>Credits</code>\nStructure containing all the PoS deferred credits …\nDeserializer for <code>DeferredCredits</code>\nSerializer for <code>DeferredCredits</code>\nDeferred credits\nExtends the current <code>DeferredCredits</code> with another and …\nApply a function to each element\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the deferred credits for a given address that will be …\nGet all deferred credits within a slot range.\nInsert an element\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the credits list is empty\nCreate a new DeferredCredits with hash tracking\nCreates a new <code>DeferredCredits</code> serializer\nCreates a new <code>DeferredCredits</code> deserializer\nCreates a new <code>Credits</code> serializer\nCreates a new single credit deserializer\nRemove credits set to zero, use only on finality\nCommunication channel was down: {0}\nContainer inconsistency: {0}\n<code>CycleUnavailable</code>: PoS cycle {0} is needed but is absent …\n<code>CycleUnfinished</code>: PoS cycle {0} is needed but is not …\nError while loading initial deferred credits file: {0}\nContains the error value\nInvalid roll distribution: {0}\nContains the success value\nOverflow error: {0}\nProof-of-Stake error\nProof-of-Stake result\nError while loading initial rolls file: {0}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecap of all PoS changes\n<code>PoSChanges</code> Deserializer\n<code>PoSChanges</code> Serializer\nset deferred credits indexed by target slot (can be set to …\nExtends the current <code>PosChanges</code> with another one\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if changes are empty\nCreate a new <code>PoSChanges</code> Serializer\nCreate a new <code>PoSChanges</code> Deserializer\nupdated production statistics\nnew roll counts for addresses (can be 0 to remove the …\nextra block seed bits added\nFinal state of PoS\nTechnical specification of <code>apply_changes_to_batch</code>:\nSends the current draw inputs (initial or bootstrapped) to …\nproof-of-stake configuration\nCreate the initial cycle based off the initial rolls.\nCreate the a cycle based off of another cycle_info.\ncontiguous cycle history, back = newest\nHelper function to construct the key prefix associated …\ncycle info deserializer\ncycle info serializer\nAccess to the RocksDB database\ndeferred credits deserializer\ndeferred credits serializer\nDeletes a given cycle from RocksDB\nFeeds the selector targeting a given draw cycle\nFeeds the selector targeting a given draw cycle\nReturns the argument unchanged.\nRetrieves the amount of rolls a given address has at a …\nGets the deferred credits for a given address that will be …\nGets all active rolls for a given cycle - 3, use …\nRetrieves the productions statistics for all addresses on …\nRetrieves the productions statistics for all addresses on …\nGet all the roll counts for a given cycle\nUsed to recompute the cycle cache from the disk.\nGetter for the final_state_hash_snapshot of a given cycle.\nGetter for the rng_seed of a given cycle, prioritizing the …\nGets the index of a cycle in history\nQueries a given cycle info in the database\nRetrieves every deferred credit in a slot range Warning: …\nGets the production stats for a given address\nRetrieves the amount of rolls a given address has at the …\ninitial rolls, used for negative cycle look back\ninitial seeds, used for negative cycle look back (cycles …\nCalls <code>U::from(self)</code>.\nCheck if a cycle is complete (all slots finalized)\nDeserializes the key and value, useful after bootstrap\nDeserializes the key and value, useful after bootstrap\nTry load initial deferred credits from file\ncreate a new <code>PoSFinalState</code>\nInternal function to put an entry for a given address in …\nHelper function to put a the complete flag for a given …\nHelper function to put a the final_state_hash_snapshot for …\nHelper function to put a the rng_seed for a given cycle\nInternal function to put an entry\nHelper function to put a new CycleInfo to RocksDB, and …\nAfter bootstrap or load from disk, recompute the caches\nReset the state of the PoS final state\nrng_seed cache to get rng_seed for the current cycle\nselector controller\nConfiguration of selector thread\ncommunication channel length\nNumber of endorsement\nReturns the argument unchanged.\ngenesis address to force draw genesis creators\nCalls <code>U::from(self)</code>.\nMaximum number of computed cycle’s draws we keep in cache\nNumber of periods per cycle\nNumber of running threads")