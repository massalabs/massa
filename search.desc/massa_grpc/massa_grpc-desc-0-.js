searchState.loadedDescShard("massa_grpc", 0, "<strong>Overview</strong>\nSlot range type\nBlock producer address (Optional)\nCheck if the slot range is valid\ngRPC configuration\nEndorsement draws\nmodels error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngRPC API implementation\nEndorsement index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nbusiness code for node management methods\nProducer address\nbusiness code for non stream methods\ngRPC service initialization and serve\nSlot\nbusiness code for stream methods\ngRPC API configuration.\ngRPC configuration. the gRPC configuration\nPrivate service name\nPublic service name\ngRPC service name\nwhich compression encodings does the server accept for …\nwhether to accept HTTP/1.1 requests\nbind for the Massa gRPC API\ncertificate authority root path\nchain id\nclient certificate authority root path\nclient certificate path\nclient private key path\nset the concurrency limit applied to on requests inbound …\nwhen looking for next draw we want to look at max …\nwhether to enable CORS. Works only if <code>accept_http1</code> is true\nwhether to enable gRPC health service\nwhether to enable mTLS (requires <code>enable_tls</code> to be true)\nwhether to enable gRPC reflection\nwhether to enable TLS\nwhether to enable gRPC\nendorsement count\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nwhether to generate a self-signed certificate if none is …\n<code>genesis_timestamp</code>\nsets whether to use an adaptive flow control. Defaults to …\nset whether HTTP2 Ping frames are enabled on accepted …\nsets a timeout for receiving an acknowledgement of the …\nsets the max connection-level flow control for HTTP2. …\nsets the SETTINGS_INITIAL_WINDOW_SIZE spec option for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkeypair file\nlast_start_period of the network, used to deserialize …\nmax number of addresses that can be included in a single …\nmax number of arguments per gRPC request\nmax number of block ids that can be included in a single …\nlimits the maximum size of streaming channel\nsets the SETTINGS_MAX_CONCURRENT_STREAMS spec option for …\nmax op datastore entries per request\nmax datastore value length\nlimits the maximum size of a decoded message. Defaults to …\nmax denunciations in block header\nlimits the maximum size of an encoded message. Defaults to …\nmax number of endorsement ids that can be included in a …\nmax endorsements per message\nmax number of filters that can be included in a single …\nsets the maximum frame size to use for HTTP2. If not set, …\nmax function name length\nmax gas per block\nmax op datastore entry\nmax datastore key length\nmax datastore value length\nmax number of operation ids that can be included in a …\nmax operations per block\nmax operations per message in the network to avoid sending …\nmax parameter size\nmax number of query items that can be included in a single …\nmax number of slot ranges that can be included in a single …\nminimal fees\nwhether to enable gRPC\nperiods per cycle\nPrivate server gRPC configuration.\nPublic server gRPC configuration.\nwhich compression encodings might the server use for …\nserver certificate path\nserver private key path\nSubject Alternative Names is an extension in X.509 …\nt0\nset whether TCP keepalive messages are enabled on accepted …\nset the value of <code>TCP_NODELAY</code> option for accepted …\nthread count\nset a timeout on for all request handlers\nconsensus error: {0}\nexecution error: {0}\nVersioning factory error: {0}\nErrors of the gRPC component.\nInternal server error: {0}\nInvalid argument error: {0}\n<code>massa_hash</code> error: {0}\n<code>massa_hash</code> error: {0}\nModels error: {0}\nProtocol error: {0}\nReflection error : {0}\nTime error: {0}\nNot implemented error: {0}\nWallet error: {0}\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nreturns the first IO error found\nAdd staking secret keys to wallet\nAdd IP addresses to node bootstrap blacklist\nAdd IP addresses to node bootstrap whitelist\nAdd IP addresses to node peers whitelist. No confirmation …\nAllow everyone to bootstrap from the node by removing …\nBan multiple nodes by their individual ids\nBan multiple nodes by their individual IP addresses\nGet node bootstrap blacklist IP addresses\nGet node bootstrap whitelist IP addresses\nGet node status\nGet node peers whitelist IP addresses\nRemove from bootstrap blacklist given IP addresses\nRemove from bootstrap whitelist given IP addresses\nRemove from peers whitelist given IP addresses\nRemove addresses from staking\nShutdown the node gracefully\nSign messages with node’s key\nUnban multiple nodes by their individual ids\nUnban multiple nodes by their individual IP addresses\nExecute read only call (function or bytecode)\nGet blocks\nGet multiple datastore entries\nGet endorsements\nGet next block best parents\nGet operations\nGet smart contract execution events\nGet the stakers\nGet transactions throughput\nGet query state\nSearch blocks\nSearch endorsements\nSearch operations\ngRPC PRIVATE API content\ngRPC PUBLIC API content\nUsed to be able to stop the gRPC API\nAdd staking secret keys to wallet\nAdd IP addresses to node bootstrap blacklist\nAdd IP addresses to node bootstrap whitelist\nAdd IP addresses to node peers whitelist. No confirmation …\nAllow everyone to bootstrap from the node by removing …\nBan multiple nodes by their individual ids\nBan multiple nodes by their individual IP addresses\nwhite/black list of bootstrap\nBroadcasts made by consensus component\nlink to the consensus component\nlink to the consensus component\nExecute read only call\nlink(channels) to the execution component\nlink to the execution component\nlink to the execution component\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nhandler for get blocks\nGet node bootstrap blacklist IP addresses\nGet node bootstrap whitelist IP addresses\nhandler for get multiple datastore entries\nhandler for get endorsements\nhandler for get mip status (versioning)\nhandler for get next block best parents\nGet node status\nhandler for get operations\nGet node peers whitelist IP addresses\nhandler for get smart contract execution events\nhandler for get selector draws\nhandler for get largest stakers\nhandler for get satatus\nhandler for get transactions throughput\ngRPC configuration\ngRPC configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkeypair factory\nMassa service health check implementation\ndatabase for all MIP info\nhandler for subscribe new blocks\nhandler for subscribe new operations stream\nhandler for subscribe new blocks with operations content\nhandler for subscribe new operations stream\nhandler for subscribe new slot abi call stacks stream\nhandler for subscribe new slot execution output stream\nhandler for subscribe new slot transfers stream\nour node id\nour node id\nUser wallet\nBroadcasts made by pool component\nlink to the pool component\nlink to the pool component\nMassa protocol configuration\nMassa protocol configuration\nlink to the protocol component\nlink to the protocol component\nhandler for get version\nRemove from bootstrap blacklist given IP addresses\nRemove from bootstrap whitelist given IP addresses\nRemove from peers whitelist given IP addresses\nRemove addresses from staking\nhandler for search blocks\nhandler for search endorsemets\nhandler for search operations\nlink to the selector component\nhandler for send_blocks_stream\nhandler for send_endorsements\nhandler for send_operations\nStart the gRPC PRIVATE API\nStart the gRPC PUBLIC API\nShutdown the node gracefully\nSign messages with node’s key\nstop the gRPC API gracefully\nMechanism by which to gracefully shut down. To be a clone …\nlink to the storage component\nhandler for transactions throughput\nUnban multiple nodes by their individual ids\nUnban multiple nodes by their individual IP addresses\nnode version\nnode version\nstream new blocks\nstream new endorsements\nstream new blocks headers\nsubscribe new operations\nsubscribe new slot abi call stacks\nsubscribe new slot execution outputs\nsubscribe new slot transfers\nsend_blocks streaming\nsend endorsements\nsend operations\nsubscribe tx througput\nType declaration for NewBlocks\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stream of new produced and received blocks\nType declaration for NewEndorsements\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stream of new produced and received …\nType declaration for NewFilledBlocks\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stream of new produced and received filled …\nType declaration for NewOperations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stream of new produced and received …\nType declaration for NewSlotExecutionOutputs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new stream of new slots abi call stacks\nSlot\nType declaration for NewSlotExecutionOutputs\nReturn if the slot execution outputs should be send to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new stream of new produced and received slot …\nType declaration for NewSlotTransfers\nType declaration for SendBlockStream\nThis function reports an error to the sender by sending a …\nThis function takes a streaming request of block messages, …\nType declaration for SendEndorsements\nThis function takes a streaming request of endorsements …\nType declaration for SendOperations\nThis function takes a streaming request of operations …\ndefault throughput interval in seconds\nType declaration for TransactionsThroughput\nThe function returns a stream of transaction throughput …")