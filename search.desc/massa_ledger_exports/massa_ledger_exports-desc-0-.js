searchState.loadedDescShard("massa_ledger_exports", 0, "General description\nTrait marking a structure that supports another one (V) …\ncontainer inconsistency: <code>{0}</code>\nSerializer for <code>datastore</code> field of <code>LedgerEntryUpdate</code>\nSerializer for <code>datastore</code> field of <code>LedgerEntryUpdate</code>\nDeletes the value T\ndeletes the value\nfile error: <code>{0}</code>\nkeeps the existing value\nDisk ledger keys representation\nBasic key deserializer\nBasic key serializer\nrepresents a list of changes to multiple ledger entries\n<code>LedgerChanges</code> deserializer\n<code>LedgerChanges</code> serializer\nLedger configuration\nStructure defining an entry associated to an address in …\nDeserializer for <code>LedgerEntry</code>\nSerializer for <code>LedgerEntry</code>\nrepresents an update to one or more fields of a <code>LedgerEntry</code>\nDeserializer for <code>LedgerEntryUpdate</code>\nSerializer for <code>LedgerEntryUpdate</code>\nledger error\nmissing entry: <code>{0}</code>\nSets the value T a new absolute value T\nsets a new absolute value T\nsets a new absolute value T\n<code>Enum</code> representing a set/delete change on a value T\nrepresents a set/keep change\nEnumeration representing set/update/delete change on a …\nApplies an update V to an existing value T. If the value T …\napply changes from other to mutable self\nchange the balance\nThe balance of that entry.\nchange the executable bytecode\nExecutable bytecode\nThis file defines a configuration structure containing all …\nchange datastore entries\nA key-value store associating a hash to arbitrary bytes\nGives the general prefix of the datastore of an address …\nChecks if a ledger entry exists\nThis file defines all error types for the ledger system\nGets the balance of a ledger entry\nGets a copy of the bytecode of a ledger entry\nGets a copy of the value of a datastore entry for a given …\nGet every key of the datastore for a given address.\ninitial SCE ledger file\nDeserializes the key and value, useful after bootstrap\nThis file provides structures representing changes to …\nThis file defines the structure representing an entry in …\nLoads ledger from file\nmax datastore value length\nmax key length\nReset the ledger\nthread count\nProvides various tools to manipulate ledger entries and …\nLedger configuration\nReturns the argument unchanged.\ninitial SCE ledger file\nCalls <code>U::from(self)</code>.\nmax datastore value length\nmax key length\nthread count\nChecks if a ledger entry exists\nGets the balance of a ledger entry\nGets a copy of the bytecode of a ledger entry\nGets a copy of the value of a datastore entry for a given …\nGet every key of the datastore for a given address.\nDeserializes the key and value, useful after bootstrap\nLoads ledger from file\nReset the ledger\ncontainer inconsistency: <code>{0}</code>\nfile error: <code>{0}</code>\nledger error\nmissing entry: <code>{0}</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDisk ledger keys representation\nBasic key deserializer\nBasic key serializer\nGives the general prefix of the datastore of an address …\nExample\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new KeyTypeSerializer. <code>with_datastore_key_length</code> …\nCreates a new KeyTypeDeserializer. <code>max_datastore_key_length</code>…\nCreates a new <code>KeySerializer</code> <code>with_datastore_key_length</code> if …\nCreates a new <code>KeyDeserializer</code> <code>max_datastore_key_length</code> is …\nSerializer for <code>datastore</code> field of <code>LedgerEntryUpdate</code>\nSerializer for <code>datastore</code> field of <code>LedgerEntryUpdate</code>\nrepresents a list of changes to multiple ledger entries\n<code>LedgerChanges</code> deserializer\n<code>LedgerChanges</code> serializer\nrepresents an update to one or more fields of a <code>LedgerEntry</code>\nDeserializer for <code>LedgerEntryUpdate</code>\nSerializer for <code>LedgerEntryUpdate</code>\nextends the <code>LedgerEntryUpdate</code> with another one\nextends the current <code>LedgerChanges</code> with another one\nchange the balance\nchange the executable bytecode\nCreate a new, empty address. Overwrites the address if it …\nchange datastore entries\nDeletes a datastore entry for a given address. Does …\nExample\nExample\nExample\nTries to return whether an entry exists or gets the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an item from the <code>LedgerChanges</code>\nTries to return the balance of an entry or gets it from a …\nTries to return the executable bytecode of an entry or …\nRetrieves all the bytcode updates contained in the current …\nTries to return a datastore entry for a given address, or …\nTries to return whether a datastore entry exists for a …\nTries to return whether the ledger changes contain a write …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DatastoreUpdateSerializer</code>\nCreates a new <code>DatastoreUpdateDeserializer</code>\nCreates a new <code>LedgerEntryUpdateSerializer</code>\nCreates a new <code>LedgerEntryUpdateDeserializer</code>\nCreates a new <code>LedgerChangesSerializer</code>\nCreates a new <code>LedgerChangesDeserializer</code>\nExample\nExample\nExample\nSet the balance of an address. If the address doesn’t …\nSet the executable bytecode of an address. If the address …\nSet a datastore entry for a given address. If the address …\nStructure defining an entry associated to an address in …\nDeserializer for <code>LedgerEntry</code>\nSerializer for <code>LedgerEntry</code>\nThe balance of that entry.\nExecutable bytecode\nA key-value store associating a hash to arbitrary bytes\nExample\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>LedgerEntrySerializer</code>\nCreates a new <code>LedgerEntryDeserializer</code>\nExample\nTrait marking a structure that supports another one (V) …\nDeletes the value T\ndeletes the value\nkeeps the existing value\nSets the value T a new absolute value T\nsets a new absolute value T\nsets a new absolute value T\n<code>Enum</code> representing a set/delete change on a value T\nrepresents a set/keep change\nEnumeration representing set/update/delete change on a …\nApplies an update V to an existing value T. If the value T …\napply changes from other to mutable self\napplies the current <code>SetOrKeep</code> to a target mutable value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")