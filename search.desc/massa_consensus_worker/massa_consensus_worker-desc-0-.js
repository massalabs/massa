searchState.loadedDescShard("massa_consensus_worker", 0, "General module description\nCreate a new consensus worker thread.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe retrieval of data is made using a shared state and …\nReturns the argument unchanged.\nGet the current best parents for a block creation\nGet a block graph export in a given period.\nGet statuses of blocks present in the graph\nGet the block, that is in the blockclique, at a given slot.\nGet a part of the graph to send to a node so that he can …\nGet all the cliques possible in the block graph.\nGet the latest block, that is in the blockclique, in the …\nGet the stats of the consensus\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nids of active blocks without ops\nadds to the given container every active block coming …\nAdd a block to the graph and update the cliques, the graph …\nList of block ids we think are attack attempts\nOne <code>(block id, period)</code> per thread TODO not sure I …\ncall me if the block database changed Processing of final …\nAll the blocks we know about and their status\nChannels to communicate with other modules\nHelper function for stats_tick. Checks if there are any …\ncheck endorsements:\nProcess an incoming header.\nThis file is responsible for clique computation\nConfiguration\nCheck if the header is valid and if it could be processed …\nStore in our indexes that we discarded this block or block …\nFinal block stats <code>(time, creator, is_from_protocol)</code>\nReturns the argument unchanged.\nBlock ids of genesis blocks\nGets a block and all its descendants\nGets all stored final blocks, not only the still-useful …\nget the current block wish list, including the operations …\nget the clique of higher fitness\nget the blockclique (or final) block ID at a given slot, …\nGet a full active block\nget the latest blockclique (or final) block ID at a given …\nCalculate and return stats about consensus\nIncompatibility graph: maps a block id to the block ids it …\nCalls <code>U::from(self)</code>.\nOne (block id, period) per thread\ntime at which the node was launched (used for …\nlist the earliest blocks of the given block id list\nlist the latest final blocks at the given slot\nlist_required_active_blocks algo:\nMark a block that is in the graph as invalid.\nmassa metrics\nAll the cliques\nNote an attack attempt if the discard reason indicates one.\nNewly final blocks\nNewly stale block mapped to creator and slot\nBlocks indexed by slot (used for multi-stake limiting). …\nNotify execution about blockclique changes and finalized …\nprevious blockclique notified to Execution\nAcknowledge a single item, return a set of items to re-ack\nBlocks that come from protocol used for stats and ids are …\nClear all the caches and blocks waiting to be processed to …\nprune active blocks and return final blocks, return …\nClear the cache of blocks indexed by slot. Slot are not …\nRemove old stats from consensus storage\nAcknowledge a set of items recursively and process them\nRegister a new full block in the graph. Ignore genesis …\nRegister a block header in the graph. Ignore genesis …\nSave of latest periods\nThis function should be called each tick and will check if …\nStale block timestamp\nthe time span considered for de-synchronization detection\nthe time span considered for stats\nMust be called each tick to update stats. Will detect if a …\nStorage\nBlocks that need to be propagated\nGet a full active block\nblocks we want\nGet a reference on the list of all blocks stored with the …\nids of active blocks\nEvery block we know about\nGet a reference on the list of all blocks stored with the …\nids of discarded blocks\nReturns the argument unchanged.\nGet a reference on a <code>BlockStatus</code> from a <code>BlockId</code>\nGet a mutable reference on a <code>BlockStatus</code> from a <code>BlockId</code>\nGet a reference on the list of all blocks stored with the …\nIds of incoming blocks/headers\nCalls <code>U::from(self)</code>.\nGet an iterator over all the blocks stored in the …\nGet the number of blocks stored in the <code>BlocksState</code>\nInitialize the <code>BlocksState</code> structure\nPromote a block id and all of its dependencies to be the …\nGet the sequence counter\nUsed to limit the number of waiting and discarded blocks\nChange the state of a block Steps are:\nGet a reference on the list of all blocks stored with the …\nids of waiting for dependencies blocks/headers\nGet a reference on the list of all blocks stored with the …\nids of waiting for slot blocks/headers\nComputes max cliques of compatible blocks\nAll informations necessary to add a block to the graph\nThe block creator\nThe fitness of the block\nReturns the argument unchanged.\nThe list of the blocks that are incompatible with this …\nNumber of incompatibilities this block inherit from his …\nCalls <code>U::from(self)</code>.\nThe list of the parents of the block (block_id, period) …\nThe slot of the block\nThe storage can the block himself and his operations and …\nthere is something wrong with that header\nThere is something wrong with that endorsement\nPossible outcomes of endorsements check\nPossible output of a header check\nit’s ok and here are some useful values\nEverything is ok\nit must wait for these block ids to be fully processed\nit must wait for its slot to be fully processed\nIt must wait for its slot to be fully processed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nfitness\nblocks that header is incompatible with\nnumber of incompatibilities that are inherited from the …\none (parent block id, parent’s period) per thread\nThe consensus worker structure that contains all …\nInternal function used at initialization of the …\nChannel to receive command from the controller\nConfiguration of the consensus\nReturns the argument unchanged.\nGets the next slot and the instant when it will happen. …\nCalls <code>U::from(self)</code>.\nExecute a command received from the controller also run an …\nCreates a new consensus worker.\nNext slot instant\nNext slot\nPrevious slot.\nRuns in loop forever. This loop must stop every slot to …\nState shared with the controller\nCreate a new consensus worker thread.\nWait and interrupt if we receive a command, a stop signal …\nCreates genesis block in given thread.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")