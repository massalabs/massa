searchState.loadedDescShard("massa_node", 0, "Massa: The Decentralized and Scaled Blockchain\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad wallet, asking for passwords if necessary\nWallet password\nrestart_from_snapshot_at_period\nBuild here the default node settings from the …\nAPI and server configuration, read from a file …\nBootstrap configuration.\nConsensus configuration Assumes …\nFactory settings\ngRPC API settings.\ngRPC settings the gRPC settings\nPool configuration, read from a file configuration\nProtocol Configuration, read from toml user configuration …\nwhich compression encodings does the server accept for …\nwhether to accept HTTP/1.1 requests\nafter <code>ask_block_timeout</code> milliseconds we try to ask a block …\nsize of the buffer of asked operations\nport on which to listen for prometheus metrics\nIp we are bind to listen to\nbind for the Massa gRPC API\nold blocks are pruned every <code>block_db_prune_interval</code>\nWhere to dump blocks\nBlock propagation tick interval, useful for propagating …\nAllocated time with which to manage the bootstrap process\nblocks channel capacity\nblocks headers channel capacity\nendorsements channel capacity\nfilled blocks channel capacity\noperations channel capacity\nslot execution outputs channel capacity\nslot execution traces channel capacity\ncertificate authority root path\nclient certificate authority root path\nclient certificate path\nclient private key path\nset the concurrency limit applied to on requests inbound …\nTime threshold to have a connection to a node\nLimits for default category\nwhen looking for next draw we want to look at max …\nwhether to enable CORS. Works only if <code>accept_http1</code> is true\nwhether to enable gRPC health service\nwhether to enable mTLS (requires <code>enable_tls</code> to be true)\nwhether to enable gRPC reflection\nwhether to enable TLS\nenable prometheus metrics\nwhether to enable gRPC\nforce keep at least this number of final periods in RAM …\nforce keep at least this number of final periods without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nwhether to generate a self-signed certificate if none is …\nsets whether to use an adaptive flow control. Defaults to …\nset whether HTTP2 Ping frames are enabled on accepted …\nsets a timeout for receiving an acknowledgement of the …\nsets the max connection-level flow control for HTTP2. …\nInitial delay\nPath for initial peers\nsets the SETTINGS_INITIAL_WINDOW_SIZE spec option for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeypair\nmax number of addresses that can be included in a single …\nmax number of arguments per gRPC request\nmax number of block ids that can be included in a single …\nTime during which a block is expected to propagate\nMax known blocks we keep during their propagation\nlimits the maximum size of streaming channel\nsets the SETTINGS_MAX_CONCURRENT_STREAMS spec option for …\nmax op datastore entries per request\nlimits the maximum size of a decoded message. Defaults to …\nMaximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…\nMaximum number of blocks allowed in discarded blocks.\nlimits the maximum size of an encoded message. Defaults to …\nmax number of endorsement ids that can be included in a …\nTime threshold after which operation are not propagated\nmax number of filters that can be included in a single …\nsets the maximum frame size to use for HTTP2(must be …\nMaximum number of blocks allowed in <code>FutureIncomingBlocks</code>.\nNb in connections\nmax known blocks our node keeps in its knowledge cache\nmax known endorsements by our node that we kept in memory\nmax known operations current node kept in memory\nmax cache size for which blocks a foreign node knows about\nmax known endorsements of foreign nodes we keep in memory …\nmax known operations of foreign nodes we keep in memory …\nmax wanted blocks per node kept in memory\nmax number of operation ids that can be included in a …\nMaximum of operations sent in one message.\nTime threshold after which operation are not propagated\nMAx number of operations kept for propagation\nmax number of query items that can be included in a single …\nMax wait time for sending a Network or Node event.\nwe ask for the same block …\nmax number of slot ranges that can be included in a single …\nMessage timeout\noperations minimum fees for block creator\nMaximum number of operations in the announcement buffer. …\nInterval at which operations are announced in batches.\nMaximum number of batches in the memory buffer. Dismiss …\nStart processing batches in the buffer each …\nPeers limits per category\nPrivate server gRPC configuration.\nPublic server gRPC configuration.\nRate limitation to apply to the data stream (per second)\nNumber of bytes we can read/write by seconds in a …\nIp seen by others. If none the bind ip is used\nIp seen by others. If none the bind ip is used\nwhich compression encodings might the server use for …\nserver certificate path\nserver private key path\nStaking wallet file\nstats time span\nstop the production in case we are not connected to anyone\nSubject Alternative Names is an extension in X.509 …\nset whether TCP keepalive messages are enabled on accepted …\nset the value of <code>TCP_NODELAY</code> option for accepted …\nCooldown before testing again an old peer\nTimeout for the tester operations\nNumber of tester threads\ninterval at which to update metrics\nset a timeout on for all request handlers\nTimeout connection\ntry connection timer\ntry connection timer for the same peer\nperiodically unban every peer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")